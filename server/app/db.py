# server/app/db.py
import os
import socket
import ssl
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

# 1) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
os.environ["PGSSLMODE"] = "require"  # –ø–µ—Ä–µ–∫—Ä–æ–µ—Ç –ª—é–±—ã–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
RAW_URL = os.getenv("DATABASE_URL", "").strip()

def _mask(url: str) -> str:
    try:
        u = urlparse(url)
        if "@" in u.netloc and ":" in u.netloc.split("@")[0]:
            creds, host = u.netloc.split("@", 1)
            user = creds.split(":", 1)[0]
            netloc = f"{user}:********@{host}"
            return urlunparse((u.scheme, netloc, u.path, u.params, u.query, u.fragment))
    except Exception:
        pass
    return url

# 2) –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –∏ —á–∏—Å—Ç–∏–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
def normalize_dsn(url: str) -> str:
    if not url:
        return url
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ asyncpg
    if url.startswith("postgresql://"):
        url = url.replace("postgresql://", "postgresql+asyncpg://", 1)

    u = urlparse(url)
    q = dict(parse_qsl(u.query, keep_blank_values=True))

    # —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ sslmode/pgbouncer ‚Äî –æ–Ω–∏ –ª–æ–º–∞–ª–∏ asyncpg
    q.pop("sslmode", None)
    q.pop("pgbouncer", None)

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç asyncpg
    # (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å SSLContext —á–µ—Ä–µ–∑ connect_args)
    q["ssl"] = "true"

    return urlunparse((u.scheme, u.netloc, u.path, u.params, urlencode(q), u.fragment))

DATABASE_URL = normalize_dsn(RAW_URL)

print("üì° DB URL used by app   =", _mask(DATABASE_URL))
print("üîê PGSSLMODE            =", os.getenv("PGSSLMODE"))

# 3) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä–æ–≥–∏–π SSLContext (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç query)
ssl_ctx = ssl.create_default_context()               # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ CA –≤–∫–ª—é—á–µ–Ω–∞
ssl_ctx.check_hostname = True                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º hostname
# ssl_ctx.verify_mode = ssl.CERT_REQUIRED            # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é REQUIRED –≤ create_default_context

# 4) –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫
engine = create_async_engine(
    DATABASE_URL,
    echo=False,
    pool_pre_ping=True,
    connect_args={"ssl": ssl_ctx},   # ¬´—Ä–µ–º–µ–Ω—å –∏ –ø–æ–¥—Ç—è–∂–∫–∏¬ª
)

async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

async def get_session() -> AsyncSession:
    async with async_session() as s:
        yield s

# 5) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DNS (–¥–ª—è health-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)
def resolve_db_host():
    try:
        u = urlparse(DATABASE_URL)
        host = u.hostname or ""
        ip = socket.gethostbyname(host) if host else ""
        return {"host": host, "ip": ip}
    except Exception as e:
        return {"error": str(e)}
